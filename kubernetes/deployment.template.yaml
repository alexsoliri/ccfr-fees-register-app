# Kubernetes resource template
#
# All variables are replaced at deployment time with environment variables.
#
# The following variables are derived as follows by the pipeline. DO NOT CHANGE:
#
#   - NAMESPACE:    product
#   - SERVICE_NAME: product-component-branch
#   - IMAGE_NAME:   registry-name/hmcts/product-component:branch
#
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
    spec:
      containers:
      - image: ${IMAGE_NAME}
        name: ${SERVICE_NAME}

        # These are obtained from environment variables.  If it's
        # an environment variable, it can be used here.  Projects
        # would usually source custom values from:
        #   - Jenkins Azure Keyvault plugin (e.g. secrets)
        #   - Your project's Jenkinsfile
        env:
        - name: ENABLE_FEE_LOADER
          value: "${ENABLE_FEE_LOADER}"
        - name: IDAM_CLIENT_BASE_URL
          value: "${IDAM_CLIENT_BASE_URL}"
        - name: REFORM_SERVICE_NAME
          value: "${REFORM_SERVICE_NAME}"
        - name: REFORM_TEAM
          value: "${REFORM_TEAM}"
        - name: RECIPE_BACKEND_URL
          value: "${RECIPE_BACKEND_URL}"
        - name: REFORM_ENVIRONMENT
          value: "${REFORM_ENVIRONMENT}"
        - name: SPRING_DATASOURCE_URL
          value: "${SPRING_DATASOURCE_URL}"
        - name: SPRING_LIQUIBASE_ENABLED
          value: "${SPRING_LIQUIBASE_ENABLED}"
        - name: SPRING_DATASOURCE_PASSWORD
          value: "${SPRING_DATASOURCE_PASSWORD}"
        - name: SPRING_DATASOURCE_USERNAME
          value: "${SPRING_DATASOURCE_USERNAME}"

        # These may be adjusted, but be mindful please
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1024Mi"
            cpu: "2500m"

        # This is the port your process is listening on in the container
        ports:
        - containerPort: 4550
          name: http
        imagePullPolicy: Always

# Azure Internal Loadbalancer.
---
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    # Make sure targetPort is the same as 'containerPort' above...
    targetPort: 4550
  selector:
    app: ${SERVICE_NAME}
